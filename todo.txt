| 优先级    | 待办                     | 具体操作                                                                                                                                                                                           |
| ------ | ---------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| **A1** | **修复类别频次统计**           | `merged_train_ds.labels` 中的 `cls` 形状为 `(n,1)` 或空 list 时被跳过；改成<br>`for cls_tensor in label_data_for_image['cls'].reshape(-1):`，确保计数正确，然后重新计算 `class_frequencies` → 重新构造 `WeightedRandomSampler` |
| **A2** | **加载 COCO 预训练权重**      | `model = ImprovedYoloV8s()` 后加<br>`model.load_state_dict(torch.load('yolov8s.pt')['model'], strict=False)`<br>（由于你改了 Detect 头，需 `strict=False` 并跳过不匹配层）                                        |
| **A3** | **调高学习率 & 缩短 warm-up** | - 设 `base_batch_size=64, base_lr=0.02`<br>- batch=8 → lr0=0.0025<br>- `warmup_epochs=3`，且 `warmup_factor` 最低设 0.2（避免 1e-4 量级）                                                                  |
| **A4** | **放缓数据增强强度**           | 训练前 30 epoch 用：`mosaic=0.5, mixup=0.1, cutmix=0.0, cutout=0.1`；之后逐渐恢复默认值或关闭 Mosaic (`close_mosaic=10`)                                                                                         |
| **B1** | **增大小批量 / 梯度累积**       | 显存允许时 `batch=16`；否则 `accumulate=2` 实现等效 batch=16                                                                                                                                               |
| **B2** | **loss 权重对齐论文**        | `cls` 权重改为 **1.0**；若使用 Focal γ=2，注意与 `class_weights` 同时生效                                                                                                                                      |
| **B3** | **动态学习率调度可视化**         | 每 epoch 记录 `lr`、`train/val loss` 到 TensorBoard；前 5 epoch loss 应明显下降，否则马上排查                                                                                                                     |
| **C1** | **Anchor 自适应初始化**      | 参考 Ultralytics v8 `auto_anchor`；对改进 Detect 头，在 `train.py` 首轮前调用 `model.detector.initialize_biases()`                                                                                           |
| **C2** | **冻结 backbone 再解冻**    | epoch 0-5 冻结前 2/3 层，专注头部收敛；epoch 6 解冻全网                                                                                                                                                        |
| **C3** | **AdamW 对比实验**         | `optimizer = AdamW(lr=lr0, weight_decay=0.05, betas=(0.9,0.999))`；对小 batch + EMA 收敛更快                                                                                                          |
| **C4** | **对齐数据集设置**            | 若目标是论文结果，建议切换官方 RDD2020 split（6 类）；否则自行标注 6 类并一致化类别顺序                                                                                                                                          |
| **C5** | **监控梯度与权重范数**          | 每 50 iter `torch.nn.utils.clip_grad_norm_` 后把 `grad_norm` 写日志，防止梯度爆炸或过小                                                                                                                        |
| **D1** | **迁移精度评估脚本**           | 采用 Ultralytics 官方 `val.py`，或确保当前 `validate()` 已修复 index 维度 bug，避免指标被意外置 0                                                                                                                      |
| **D2** | **逐层 lr\_decay（可选）**   | 给 backbone 设置 0.1× lr，DyHead 设置 1× lr，回归/分类卷积设置 1.5× lr，提升头部学习速度                                                                                                                               |
